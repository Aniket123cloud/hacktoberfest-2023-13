Given an integer array a[ ] of N elements and an integer K, the task is to check if the array a[ ] could be divided into K non-empty subsets with equal sum of elements.
Note: All elements of this array should be part of exactly one partition.

Example 1:

Input: 
N = 5
a[] = {2,1,4,5,6}
K = 3
Output: 
1
Explanation: we can divide above array 
into 3 parts with equal sum as (2, 4), 
(1, 5), (6)

def canPartitionKSubsets(nums, k):
    total_sum = sum(nums)
    if total_sum % k != 0:
        return False

    target_sum = total_sum // k
    n = len(nums)
    visited = [False] * n

    def backtrack(start, current_sum, subset_count):
        if subset_count == k:
            return True

        if current_sum == target_sum:
            return backtrack(0, 0, subset_count + 1)

        for i in range(start, n):
            if not visited[i] and current_sum + nums[i] <= target_sum:
                visited[i] = True
                if backtrack(i + 1, current_sum + nums[i], subset_count):
                    return True
                visited[i] = False

        return False

    return backtrack(0, 0, 0)

# Example usage:
N = 5
a = [2, 1, 4, 5, 6]
K = 3
result = canPartitionKSubsets(a, K)
print(result)  # Output: True (1)
